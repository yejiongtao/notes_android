1. RelativeLayout
	use layout parameters to arrange child views relative to the root layout and to each other
	<RelativeLayout>						//omit some irrelevant attributes
	    <CheckBox
		android:id="@+id/list_item_crime_solved_check_box"	 
		android:layout_alignParentRight="true"/>		//align itself to the right-hand side of the RelativeLayout
				//although it's on the right-hand side, it must be declared first, because the remaining two are using its id
	    <TextView
		android:id="@+id/list_item_crime_title_text_view"
		android:layout_toLeftOf="@id/list_item_crime_solved_check_box"/>

	    <TextView
		android:id="@+id/list_item_crime_date_text_view"
		android:layout_toLeftOf="@id/list_item_crime_solved_check_box"
		android:layout_below="@id/list_item_crime_title_text_view"/>
	</RelativeLayout>

2. When an item in the RecyclerView gets complicated
	create a layout for an item
	inflate the View based on the layout in Adapter's onCreateViewHolder()
	get the widgets in ViewHolder
	since ViewHolder is the one knows about list item, so create a method to bind the widgets to the data
	use the bind method in Adapter's onBindViewHolder()

3. respond to pressing the whole list item in RecyclerView
	just add an OnClickListener to the itemView in ViewHolder

4. old versions of RecyclerView: ListView and GridView
	also use Adapter, but ViewHolder is not a must
	replaced by RecyclerView because the complexity required to alter the behavior of a ListView or GridView

5. Starting an Activity from a Fragment
	Starting an activity from a fragment works nearly the same as starting an activity from another activity. 
	You call the Fragment.startActivity(Intent) method, which calls the corresponding Activity method behind the scenes.

6. access its activity's intent from a fragment
	for example, when an activity is created by others, extras may be passed to it, but the fragment is the one who actually need to deal with the passed extras
		so it need to access the activity's content
	2 ways to achieve this:
		use getActivity() to get the parent activity directly
			not good, because it destroys the encapsulation of the fragment
			the fragment will be highly dependent on the activity, which is not good
		using fragment arguments

7. fragment arguments
		every fragment instance can have a Bundle object attached to it. 
		This bundle contains key-value pairs that work just like the intent extras of an Activity. Each pair is known as an argument.
	using it:
		create a Bundle, and use type-specific "put" methods of Bundle to add arguments
			Bundle args = new Bundle();
			args.putSerializable(EXTRA_MY_OBJECT, myObject);	//also use this one to put a UUID
			args.putInt(EXTRA_MY_INT, myInt);
			args.putCharSequence(EXTRA_MY_STRING, myString);
		attach the Bundle to the fragment 
			must be done after fragment is created but before it is added to an activity
			we usually create a static method in Fragment class for the activity to call, 
				implementing the creation of the fragment, passing the arguments and the attachment of the Bundle
					public static CrimeFragment newInstance(UUID crimeId) {
						Bundle args = new Bundle();
						args.putSerializable(ARG_CRIME_ID, crimeId);

						CrimeFragment fragment = new CrimeFragment();
						fragment.setArguments(args);
						return fragment;
					}
		retrieving arguments
			calls Fragment's method getArguments().getInt("")
	ATTENTION:
		you cannot call setArguments() on an already active fragment

8. reloading the list
	create a method to create Adapter, or to call notifyDataSetChanged() if the Adapter already exists
		private void updateUI() {
			CrimeLab crimeLab = CrimeLab.get(getActivity());
			List<Crime> crimes = crimeLab.getCrimes();

			if (mAdapter == null) {
				mAdapter = new CrimeAdapter(crimes);
				mCrimeRecyclerView.setAdapter(mAdapter);
			} else {
				mAdapter.notifyDataSetChanged();	// use nofifyItemChanged(int) to reload exact one item to be more efficient
			}
		}
	override Activity's onResume() method, call updateUI()
		@Override
		public void onResume() {
		    super.onResume();
		    updateUI();
		}

9. getting results with Fragments
	A fragment can receive a result from an activity
		use Fragment.startActivityOnResult(...)
		override Fragment.onActivityResult
	but a fragment cannot have its own result, instead, you tell the host activity to return a value
		getActivity().setResult(Activity.RESULT_OK, null);

10. ViewPager --let users navigate between list items by swiping across the screen
	is like RecyclerView in some ways
		but only available in support library
	needs PagerAdapter
		use FragmentStatePagerAdapter, a subclass of PagerAdapter, to simplify conversations with ViewPager

	using ViewPager:
		add a ViewPager to the layout xml file
		get it in the fragment ( or Activity if not using fragment)
		create an FragmentStatePagerAdapter for it
			creating one needs a FragmentManager
			override getItem() and getCount()
			in getItem(), create a fragment for a page
		sample code:
			// in this example, an Activity holds the ViewPager directly.
			// we don't use fragment between them if it is simply a ViewPager inside an Activity, to simplify procedures like passing Intent
			// don't forget to add the declaration of the Activity to the manifest
			public class CrimePagerActivity extends FragmentActivity {

			    private ViewPager mViewPager;
			    private List<Crime> mCrimes;

			    @Override
			    protected void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				setContentView(R.layout.activity_crime_pager);

				mViewPager = (ViewPager) findViewById(R.id.activity_crime_pager_view_pager);

				mCrimes = CrimeLab.get(this).getCrimes();
				FragmentManager fragmentManager = getSupportFragmentManager();		// create a FragmentManager
				mViewPager.setAdapter(new FragmentStatePagerAdapter(fragmentManager) {

				    @Override
				    public Fragment getItem(int position) {
					Crime crime = mCrimes.get(position);
					return CrimeFragment.newInstance(crime.getId());
				    }

				    @Override
				    public int getCount() {
					return mCrimes.size();
				    }
				});
			    }
			}
		
11. More about ViewPager
	By default, ViewPager loads the item currently on screen plus one neighboring page in each direction so that the response to a swipe is immediate. 
		You can tweak how many neighboring pages are loaded by calling setOffscreenPageLimit(int).
	By default, the ViewPager shows the first item in its PagerAdapter. 
		You can have it show the crime that was selected by setting the ViewPager’s current item to the index of the selected crime.
		mViewPager.setCurrentItem(i);
	FragmentStatePagerAdapter vs. FragmentPagerAdapter
		FragmentStatePagerAdapter detroys unneeded fragments
			it stores the state by onSaveInstanceState(Bundle), and restores it when user navigates back
		FragmentPagerAdapter
			never detroys instance of fragments
		for long lists, we use FragmentStatePagerAdapter to save memory, 
			but if your interface has a small, fixed number of fragments, for example, a tabbed interface, using FragmentPagerAdapter will be more convenience
	thanks for FragmentStatePagerAdapter and FragmentPagerAdapter, using ViewPager becomes easy
		if you want ViewPager to host something other than Fragments, namely normal View objects, like a few images, you have to implement the raw PagerAdapter interface.
		

