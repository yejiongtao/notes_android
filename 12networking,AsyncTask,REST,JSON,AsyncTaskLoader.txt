1. networking
	code to fetch data
		     public byte[] getUrlBytes(String urlSpec) throws IOException {
			URL url = new URL(urlSpec);
			HttpURLConnection connection = (HttpURLConnection)url.openConnection();

			try {
			    ByteArrayOutputStream out = new ByteArrayOutputStream();
			    InputStream in = connection.getInputStream();

			    if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
				throw new IOException(connection.getResponseMessage() +
					": with " +
					urlSpec);
			    }

			    int bytesRead = 0;
			    byte[] buffer = new byte[1024];
			    while ((bytesRead = in.read(buffer)) > 0) {		// why not use BufferedInputStream?
				out.write(buffer, 0, bytesRead);
			    }
			    out.close();
			    return out.toByteArray();
			} finally {
			    connection.disconnect();
			}
		    }

		    public String getUrlString(String urlSpec) throws IOException {
			return new String(getUrlBytes(urlSpec));
		    }
	ask permission to network
		before Android 6.0 (Marshmallow), the only thing you can do it's to ask permissions before intallation
			if permissions are not granted, then the app will not be installed
				<manifest>

				  <uses-permission android:name="android.permission.INTERNET" />
				  <application>... </application>
				</manifest>
		with Marshmallow, you can ask permissions right before the first use of a resource
			it's better to use the old behavior for those permissions you can not do without, 
			but for less critical ones, the newer style of request is much kinder
	
2. android.os.AsyncTask
	Android disallows all networking on the main thread, because networking can take so long
		a NetworkOnMainThreadException will be thrown
		the main thread is also called the UI thread
			it updates the UI and takes care of the events
			so if you have something that will take lots of time, use another thread
	AsyncTask creates a background thread for you and runs the code in the doInBackground(…) method on that thread
		extend AsyncTask, and override doInBackground()
		call new MyAsyncTask().execute()
	from AsyncTask back to the main thread
		you are not allowed to update UI from a background thread, because the possibility of corrupting the objects in the memory
		onPostExecute()
			AsyncTask.onPostExecute() is run after doInBackground()
			and it's run on the main thread! so it's safe to update the UI with it
				private class FetchItemsTask extends AsyncTask<Void, Void, Void List<GalleryItem>> {	// note the third generic parameter
					@Override
					protected Void List<GalleryItem> doInBackground(Void... params) {	// returns a List

					    return new FlickrFetchr().fetchItems();
					}

					@Override
					protected void onPostExecute(List<GalleryItem> items) {			// uses the List returned by doInBackground()
					    mItems = items;
					    setupAdapter();
					}
				}
	cleaning up AsyncTask
		you should be careful dealing with thread
			for example, when rotation happens, is there a new AsyncTask being created and get running?
			maybe you can avoid this by retaining the fragment, but not always appropriate
		to cancel a AsyncTask
			hold its reference as a field
			call AsyncTask.cancel(boolean)
				cancel(true) will stop the AsyncTask immediately, which should be avoided if you can
				cancel(false) just set isCancelled() to true
					then you can check isCancelled() inside of doInBackground() and elect to finish
			when and where should you cancel your AsyncTask
				ask yourself whether the AsyncTask should be stopped if the fragment or activity is destroyed or goes out of view
					if so, cancel it in onStop() or in onDestroy()
				if you have importance task to maintain performing after the activity being destroyed
					is's better to use Service, to avoid memory leaks, or accessing the UI when it's in an invalid state

3. Fragment.isAdded()
	checks if the fragment is attached to an activity
	when you are using an AsyncTask, you are triggering some callbacks from a background thread
		you cannot assume that the fragment is attached to an activity
		so call isAdded() to check it before some behaviors
			e.g. before adding an Adapter to the RecyclerView
			because the adding is also called when the AsyncTask thread finishes fetching data
				maybe a rotation just happens and the fragment haven't been attached to the activity yet
		
4. REST api
	example
	      public void fetchItems() {
		  try {
		      String url = Uri.parse("https://api.flickr.com/services/rest/")	// using a Uri.Builder to build the complete URL for the RESTful APi request
			      .buildUpon()
			      .appendQueryParameter("method", "flickr.photos.getRecent")	// these parameters depend on the API
			      .appendQueryParameter("api_key", API_KEY)
			      .appendQueryParameter("format", "json")
			      .appendQueryParameter("nojsoncallback", "1")
			      .appendQueryParameter("extras", "url_s")
			      .build().toString();
		      String jsonString = getUrlString(url);		// this is the method we wrote to fetch data from the url
		      Log.i(TAG, "Received JSON: " + jsonString);
		  } catch (IOException ioe) {
		      Log.e(TAG, "Failed to fetch items", ioe);
		  }
	      }
	

5. JSON (JavaScript Object Notation)
	Android includes the standard org.json package, which has classes that provide simple access to creating and parsing JSON text
	json.org provides Java classes corresponding to JSON text, such as JSONObject and JSONArray
	to parse
		JSONObject jsonBody = new JSONObject(jsonString);		// get the top-level JSONObject that maps to the outermost curly braces in the original JSON text
		
		// get the object and array
		JSONObject photosJsonObject = jsonBody.getJSONObject("photos");
		JSONArray photoJsonArray = photosJsonObject.getJSONArray("photo");
		
		item.setId(photoJsonObject.getString("id"));			// get the value
	Gson
		a library to map JSON data to Java objects automatically, no parsing code needed
such third party libraries can be directly add as dependency in Android Studio


6. more on AsyncTask
	AsyncTask<Void,Void,Void>
	parameters
		the first one specifies the type of input parameters you will pass to the execute()
			which are received by doInBackground(Void...)
			a variable number of arguments
				task.execute("First parameter", "Second parameter", "Etc.");
		the second one specifies the type for sending progress updates
			Progress updates usually happen in the middle of an ongoing background process
			but you cannot make the necessary UI updates inside that background process
			so you call publishProgress(...) from doInBackground()
				which will invoke onProgressUpdate(Void...) and pass data to it
				onProgressUpdate(Void...) is run on the UI thread, so you can override it to update UI
		the third one specifies the return type of the doInBackground()
			which receives by onPostExecute(Void...)

7. alternative to AsyncTask: AsyncTaskLoader
	if you use an AsyncTask to load data, you are responsible for managing its lifesycle
		situations you have to consider:
			configuration changes, such as rotation
			user presses the back button
			the fragment that launched the AsyncTask getting destroyed during execution by the OS due to a low-memory situation
	using Loader can take some of this responsibility off your hands
		a Loader loads data from some source, such as disk, database, ContentProvider, network, etc.
	AsyncTaskLoader uses another thread, i.e., an AsyncTask to do the loading
		during configuration changes, the LoaderManager will keep the loaders alive, along with their data
		LoaderManager is responsible for starting, stopping, and maintaining the lifecycle of the Loaders
		after configuration changes, if you initialize a loader that has already finished loading its data,
			it can deliver that data immediately, instead of fetching it again
