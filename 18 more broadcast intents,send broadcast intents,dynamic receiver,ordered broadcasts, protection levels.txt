1.using broadcast intents to filter foreground notifications
	work flow
		when a new notification is ready -> send a broadcast intent saying "Notification Ready"
			if a fragemnt is on, it will receive "notification Ready", and then set the result to be "no", saying don't post notifications
			when a standalone receiver receives "Send Notification", it will based on "yes" or "no" to post the notification
		(the order of the two receivers is crusial, so ordered broadcast intents should be used)
		(receiver for "Send Notification" must be standalone, since the app may be not running)

	implement:
		send a custom broadcast intent
			// public static final String ACTION_SHOW_NOTIFICATION = "com.bignerdranch.android.photogallery.SHOW_NOTIFICATION";
			sendBroadcast(new Intent(ACTION_SHOW_NOTIFICATION));

			limit broadcasts to your app using private permissions
				create a permission in the manifest
					<manifest ...>

					    <permission android:name="com.bignerdranch.android.photogallery.PRIVATE"
					      android:protectionLevel="signature" />

					    ...
					    <uses-permission android:name="com.bignerdranch.android.photogallery.PRIVATE" />

				pass the permission to sendBroadcast()
						// public static final String PERM_PRIVATE = "com.bignerdranch.android.photogallery.PRIVATE";
						sendBroadcast(new Intent(ACTION_SHOW_NOTIFICATION), PERM_PRIVATE);
					in this way, you ensure any application must use that same permission to receive the intent

				pass the persmission to registerReceiver()
						getActivity().registerReceiver(mOnShowNotification, filter, PollService.PERM_PRIVATE, null);
					in this way, you ensure this receiver only response those broadcast intents with this permission

		create and register a dynamic receiver
			IntentFileter
				you can use addCategory(String), addAction(String), addDataPath(String) to configure your intent filter
				intent filters created in the code have the same effect as those created in manifest

			register and unregister receiver
				call Context.registerReceiver(BroadcastReceiver, IntentFilter) in a startup lifecycle method
					and Context.unRegisterReceiver(BroadcastReceiver) in the corresponding shutdown method
				e.g. onStart() and onStop()
					onActivityCreated() and onActivityDestroyed()
					onCreate() and onDestroy()
						Be careful with onCreate(…) and onDestroy() in retained fragments
						getActivity() will return different values in onCreate(…) and onDestroy() if the screen has rotated
							use getActivity().getApplicationContext() instead

			code
				public abstract class VisibleFragment extends Fragment {
				    private static final String TAG = "VisibleFragment";	// for logging

				    @Override
				    public void onStart() {
					super.onStart();
					IntentFilter filter = new IntentFilter(PollService.ACTION_SHOW_NOTIFICATION);
					getActivity().registerReceiver(mOnShowNotification, filter);
				    }

				    @Override
				    public void onStop() {
					super.onStop();
					getActivity().unregisterReceiver(mOnShowNotification);
				    }


				    private BroadcastReceiver mOnShowNotification = new BroadcastReceiver() {
					@Override
					public void onReceive(Context context, Intent intent) {
					    // If we receive this, we're visible, so cancel the notification
					    Log.i(TAG, "canceling notification");
					    setResultCode(Activity.RESULT_CANCELED);
					}
				    };
				}
		
		ordered broadcasts
			why?
				by default, the receivers of a broadcast intent will receive it "at the same time"
				for ordered breadcasts, receivers reveive the intent in the specified order

			an additional tool for ordered broadcast, setResult(int, String, Bundle)
				// or setResultCode(int), setResultData(String), setResultExtras(Bundle)
				the result is originally from the sender of the broadcast intents
				and can be reset by any receivers

			to send an ordered broadcast intent
				Intent i = new Intent(ACTION_SHOW_NOTIFICATION);
				i.putExtra(REQUEST_CODE, requestCode);
				i.putExtra(NOTIFICATION, notification);		// the to-be-sent notification
				sendOrderedBroadcast(i, PERM_PRIVATE,
				     null, null, Activity.RESULT_OK, null, null);
				// five more parameters compared to sendBroadcast()
				// a result receiver, a Handler to run the result receiver on, and then initial values for the result code, result data, and result extras for the ordered broadcast
			
			set the resultCode to be Activity.RESULT_CANCELED in the dynamic receiver in the fragments
			create a standalone receiver to check the result code and post the notification if nessecary
				code
					public class NotificationReceiver extends BroadcastReceiver {
					    private static final String TAG = "NotificationReceiver";

					    @Override
					    public void onReceive(Context c, Intent i) {
						Log.i(TAG, "received result: " + getResultCode());
						if (getResultCode() != Activity.RESULT_OK) {
						    // A foreground activity cancelled the broadcast
						    return;
						}

						int requestCode = i.getIntExtra(PollService.REQUEST_CODE, 0);
						Notification notification = (Notification)
							i.getParcelableExtra(PollService.NOTIFICATION);

						NotificationManagerCompat notificationManager =
							NotificationManagerCompat.from(c);
						notificationManager.notify(requestCode, notification);
					    }
					}

				register the standalone receiver with a lowest priority, so that it runs last
					<receiver android:name=".NotificationReceiver"
					      android:exported="false">
					      <intent-filter
						android:priority="-999">	// -1000 and below are reserved
						<action
						    android:name="com.bignerdranch.android.photogallery.SHOW_NOTIFICATION" />
					      </intent-filter>
					</receiver>

2. More about protection levels
	normal
		for protecting app functionality that will not do anything dangerous like accessing secure personal data or sending data to the Internet
		The user can see the permission before choosing to install the app, but is not explicitly asked to grant it.

	dangerous
		The Internet permission, camera permission, and contacts permission and the like which are have things to do with users' privacy or may cause real problems
		Android may ask the user for an explicit go-ahead before approving a dangerous permission.

	signature
		The system grants this permission if the app is signed with the same certificate as the declaring application
		user will not be notified
		you have your own certificate, so all your apps can use the permission

	signatureOrSystem
		This is like signature, but it also grants permission to all packages in the Android system image. 
		This is for communicating with apps built into the system image. 
		Most developers do not need to use it.

