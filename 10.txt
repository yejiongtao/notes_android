1. retaining a fragment
	you release the SoundPoll in onDestroy(), here comes the problem
		if you play a sound and then rotate the device, the sound will cease abruptly
		you cannot use onSaveInstanceState(Bundle) to solve the problem, instead, you retain the fragment from being destroy
	in the fragment, setRetainInstance(true);
		in this way, after onDestroyView(), onDetach() happend, the fragment enter a retained state
		after the new FragmentManager is created, onAttach() happens, and then onCreateView()
	The retained state is only entered into when:
		setRetainInstance(true) has been called on the fragment.
		The hosting activity is being destroyed for a configuration change (typically rotation)

2. whether to retain
	do not retain if you can solve the problem via onSaveInstanceState(Bundle), because
		retained fragments are far more complicated, difficult to deal with when something goes wrong
		retained fragments only handle the case when an activity is destroyed for a configuration change
			in some other cases, such as when OS needs to reclaim memory, retained fragments also die, and data loss may happen

3. more about onSaveInstanceState(Bundle)
	it's to save out and restore the UI state of your app
	other data needs to be stored should be maunally stashed in it
	it will store the data in the app's record, which will survive a while after the app is cleaned up by OS (I am not 100% sure)

4. color resources
	res/values/colors.xml
		<resources>
		  <color name="red">#F44336</color>
		  <color name="dark_red">#C3352B</color>
		</resources>
	define in one place, and reference throughout the app

5. styles
	define a style in res/values/styles.xml
		<resources>
		  <style name="BeatBoxButton">
		      <item name="android:background">@color/dark_blue</item>
		  </style>
		</resources>
	apply a style in layout file
		<Button
		    style="@style/BeatBoxButton"
		    android:id="@+id/list_item_sound_button"/>
	style inheritance
		a style can inherit and override attributes from, and add attributes to another style
		two ways to inherit BeatBoxButton
			<style name="BeatBoxButton.Strong">
			    <item name="android:textStyle">bold</item>
			</style>
			<style name="StrongBeatBoxButton" parent="@style/BeatBoxButton">
			    <item name="android:textStyle">bold</item>
			</style>
		actually, the inheritance naming styles only work in the same package
			in Android source code, within the same package, such as inside OS, or in AppCompat, they use naming styles
			when crossing over to another package, they use the parent attribute style
			it's good to follow the convention
				Specify your theme parent in the name of your theme if you are inheriting from one of your own themes
				If you inherit from a style or theme in the Android OS, explicitly specify the parent attribute.

6. themes
	The downside of styles is that you have to apply them to each and every widget, one at a time
		and the theme is always setting color anyway, using extra styles to set color again is wasting the app's effort
	a theme is a special style
		  <style name="AppTheme" parent="Theme.AppCompat">
		      <item name="colorPrimary">@color/red</item>		primary color, used as the toolbar's background as well as in a few other places
		      <item name="colorPrimaryDark">@color/dark_red</item>	colors the status bar (the one at the top of the screen), prior to Lollipop, it will be black
		      <item name="colorAccent">@color/gray</item>		contrast with your colorPrimary attribute; it is used to tint some widgets, such as an EditText
		  </style>
		AppCompat has three main themes 
			Theme.AppCompat – a dark theme
			Theme.AppCompat.Light – a light theme
			Theme.AppCompat.Light.DarkActionBar – a light theme with a dark toolbar
	apply to the app in the manifest
		    <application
			android:theme="@style/AppTheme">
			    ...
		    </application>	
	ctrl+click on Windows, or double click on Mac, Android Studio will bring you to the source of the thing
	to find out what attributes of the theme you can override 
		since there's no or little documents about this, we usually go to the source file to find out
		begin with Theme.AppCompat, keep going until you find a source outside of AppCompat library
			here, it's android:Theme.Holo
			noticed that there's a android: prefix here, but nothing in front of Theme.AppCompat
				that's because files in the support library is like files we write on our own and then pack it with the app
				but files like android:Theme.Holo are built in the Android OS
		now you can select from the attributes to override
			<style name="AppTheme" parent="Theme.AppCompat">
			  <item name="colorAccent">@color/gray</item>
			  <item name="android:colorBackground">@color/soothing_blue</item>	// noticed that the name has an android: prefix as well
			</style>								// because it's from the Android OS
	modifying button attributes
		look for a group of button attributes in android:Theme.Holo
			<item name="buttonStyle">@style/Widget.Holo.Button</item>
				it points to a style, go for it, and you will find some attributes you can override
		now, override some attributes in your own style
			<style name="BeatBoxButton" parent="android:style/Widget.Holo.Button">
			    <item name="android:background">@color/dark_blue</item>
			</style>
		and then apply it in your theme, just like they do in android:Theme.Holo
			<style name="AppTheme" parent="Theme.AppCompat">
				...
				<item name="android:buttonStyle">@style/BeatBoxButton</item>
			</style>
	the material theme is from the Lollipop, it changes in many ways
		you can create a resource-qualified version of the styles to let devices of the newer version use material theme

7. XML drawables	--we are useing the drawables to make our button prettier
	density independent
		no need to define with resource qualifiers for the screen density
	about RecyclerView with GridLayoutManager
		the amount of rows and columns are fixed, in larger screen, the item will be expand to be larger
		if you want to avoid that, you define the button's width and height to be fixed values,
			and add a FrameLayout to be parent of the item
			in this way, RecyclerView will expand the FrameLayout, but the size of the item will be fixed
	Shape Drawables
		define an xml file in res/drawable
			<shape xmlns:android="http://schemas.android.com/apk/res/android"
			  android:shape="oval">			// shape can be retangle, line, etc
			  <solid
			    android:color="@color/dark_blue"/>
			</shape>
		apply it as the button's background in the styles.xml file
			<style name="BeatBoxButton" parent="android:style/Widget.Holo.Button">
			      <item name="android:background">@drawable/button_beat_box_normal</item>
			</style>
	state list drawables
		points to other drawables based on the state of something
		define an xml file
			<selector xmlns:android="http://schemas.android.com/apk/res/android">
			  <item android:drawable="@drawable/button_beat_box_pressed"
				android:state_pressed="true"/>
			  <item android:drawable="@drawable/button_beat_box_normal" />
			</selector>
		apply it in the styles file
		there are other states
			android:state_focused=["true" | "false"]
			android:state_hovered=["true" | "false"]
			android:state_selected=["true" | "false"]
			android:state_checkable=["true" | "false"]
			android:state_checked=["true" | "false"]
			android:state_enabled=["true" | "false"]
			android:state_activated=["true" | "false"]
			android:state_window_focused=["true" | "false"]
	layer list drawables
		combines more than one XML drawables into one
			<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
			  <item>
			    <shape
				android:shape="oval">
				<solid
				  android:color="@color/red"/>
			    </shape>
			  </item>

			  <item>			// the second one will be drawn on top of the previous ones
			    <shape
			      android:shape="oval">
			      <stroke			// only draw a stroke
				android:width="4dp"
				android:color="@color/dark_red"/>
			    </shape>
			  </item>
			</layer-list>
