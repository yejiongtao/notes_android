1. exception breakpoint
	Run -> View BreakPoints -> add -> Java Exception BreakPoint
	will pause exactly where a exception was thrown

2. Android Lint
	some Android specific bugs just cannot be found by Java debugger, such as those concerning resources
	Android Lint is a static Android code analyzer, which finds defects without running the code
	Analyze -> Inspect Code -> Whole project

3. buiding issues come from nowhere
	Build -> Clean Project  will clean the project and restart building from scratch

4. creating a second activity
	Creating an activity typically involves touching at least three files: the Java class file, an XML layout, and the application manifest
		can be done easily by using the New Activety wizzard  (choose the empty activity)
	manifest  --an XML file containing metadata that describes your app to the Android OS
		named AndroidManifest.xml
		every activities must be declared for Android to reach it!!!
		if you use the New Activity wizzard, the declaration will be done for you
			otherwise you have to declare it yourself
			sometimes you have to change the launcher activity if you need it 
	start an activity
		startActivity(new Intent(QuizActivity.this, CheatActivity.class))
	Intent --a multi-purpose communication tool, has various constructors for the use of different purposes
		Intent(Context, Class<?>)
			Context tells that which application package the activity class can be found, and the class is of the Activity to start
		in this case, Intent is to tell the ActivityManager of Android which Activity is to begin
	Activities communicate to each other via Activity Manager, which is outside of my app. 
		In this way, it is easier for activities in different apps to communicate
	pressing the back button will shut down the activity
		Activtiy.finish() will also shut down an activity

5. tools namespace --for the use of developing. the attribute using this namespace will only be valid during development
	<LinearLayout	xmlns:android="http://schemas.android.com/apk/res/android"
			xmlns:tools="http://schemas.android.com/tools">
		<TextView
			android:padding="24dp"
			tools:text="Answer">
	</LinearLayout>

6. communications between activities --using intent extras
	tips: write a static method in the newly started Activity, to create an Intent and put extras in it
		public static Intent newIntent(Context packageContext, boolean answerIsTrue) {
			Intent i = new Intent(packageContext, CheatActivity.class);
			i.putExtra(EXTRA_ANSWER_IS_TRUE, answerIsTrue);
			return i;
		}
		instead of do the work in the calling Activity, in this way, if there are many activities, it will be more clear that what extras are passed to them
	putExtra() takes a String key, and a value of different kind
		returns the Intent itself, so if nessecary, can use this way: i.putExtra().putExtra()
	usually we use packet name as prefix of the key, to avoid name collision with extras in other apps. because we have only one activity manager
		static final String EXTRA_ANSWER_TRUE = "com.example.cisco.geoquiz.answer_is_true";
	when the activity is started, the Intent with extras will be sent to it
	then in the started activity, we can retrieve the extra:
		mAnswerIsTrue = getIntent().getBooleanExtra(EXTRA_ANSWER_IS_TRUE, false);
			getIntent()  returns the exact Intent that was passed when this activity was created
			the second attribute of getBooleanExtra is the default value returned if the key is not found
	when the child activity is created, the original one is paused, and maybe stopped
		when you press the back button to close the child activity, the original one will be resumed
	
7. getting a result back from the child activity
	if you need a result back from the child activity, here are the procedures:
		father activity calls startActivityForResult(Intent intent, int requestCode) instead
			requestCode is used to identify which child is the result from when receiving it
				final static int REQUEST_CODE_SOMETHING = 0;
		child activity calls setResult(int resultCode) or setResult(int resultCode, Intent data)
			result code is usually be Activity.RESULT_OK or Activity.RESULT_CANCELED
			if the result is not set manually, when the user press back button, then the resultcode will be RESULT_CANCELED
			Intent can be used to return extra datas
		rewrite father activity's onActivityResult(int requestCode, int resultCode, Intent data) method
			to identify and retrieve the result
			tip: you can write a static method of the child activity to decode the Intent, because in this way, the keys of the Intent will only be used in the child activity

8. compatability
	minimum SDK version
		below which the Android OS will refuse to install the app
	target SDK version
		is the API level your app designed to run on 
		usually is the latest Android release
		but sometimes you have to lower it down for compatibility
	compile SDK version
		is not used to update the AndroidManifest.xml file, while the purpose of minimum SDK and target SDK is to inform Android OS about the app
		determines the SDK version to use by the compiler
	after change of the SDK versions in the build.gradle file, sync of project must be done
		Tools -> Android -> Sync Project with Gradle Files
	if your using some new functions provided by SDK with higher version than your minimum version, then Lint will warn you
		however, if the one you are using is not above the compile SDK version, then the compiler will be ok with it
	to use APIs from higher versions safely
		wrap the higher API code in a conditional statement that checks the device's version of Android
			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
				//do something fancy via new APIs
			} else {
				//do the old stuff
			}
		Build.VERSION.SDK_INT constant is the device's version of Android
		Version codes are listed at http://developer.android.com/​reference/​android/​os/​build.version_codes.html
	check the documentation!!
	in my opinion, to ensure usability on all SDK versions higher than minimum SDK, we should use the minimum SDK as the compile SDK version
		to let the compiler check for you

9.UI fragments --the view of an activity can be divided into several fragments, in this way it is more flexible to organize UI
	a fragment is not capable of getting itself appeared on the screen, it has to be placed in an activity's hierachy

10. support library
	an independent library consisting of some APIs, including fragments
	originally built to allow to use fragments on lower level Android
	but it is good to use support library instead of APIs built into Android OS
	the reason is that in this way, we can use the latest version of those APIs, with all the new features, on any SDK level
	using it:
		add a dependency to app/build.gradle:
			File -> Project Structure -> app -> dependencies  add a Library denpendency named support-v4
	v4 means API 4 is the lowest level it supports

11. using fragments
	FragmentActivity --to use fragment, we need an Activity that supports it, which is FragmentActivity
	create a fragment
		create a xml file for UI
		create a class, and set its view to be the layout you defined
			public class CrimeFragment extends Fragment {
				private Crime mCrime;

				@Override
				public void onCreate(Bundle savedInstanceState) {	// in this method, you configure the instance, retrieve the state
					super.onCreate(savedInstanceState);		// but create and configure the view in onCreateView()
					mCrime = new Crime();
				}

				@Override
				public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
					View v = inflater.inflate(R.layout.fragment_crime, container, false);	// The third parameter tells the layout inflater whether to add the inflated view to the view’s parent. 
														//You pass in false because you will add the view in the activity’s code
					// here you do something about the widgets
					return v;
				}
			}
		wire up the widgets (add listeners, etc.)
	to host a UI fragment, an activity should:
		define a spot in its layout for the fragment's view
			usually it's an empty FrameLayout. create an id for the layout
			add the fragment into the layout in your code, in this way you can change it into other fragments if you want
				FragmentManager --handles a list of fragments and a back stack of fragment transactions
				@Override
				protected void onCreate(Bundle savedInstanceState) {
					super.onCreate(savedInstanceState);
					setContentView(R.layout.activity_crime);

					FragmentManager fm = getSupportFragmentManager();	// get the FragmantManager
						// use getSupportFragmentManager() instead of getFragmentManger() because we are using the support library

					Fragment fragment = fm.findFragmentById(R.id.fragment_container);
						// the container view ID is used as a unique identifier for a fragment in the FragmentManager’s list

					if (fragment == null) {
					    fragment = new CrimeFragment();
					    fm.beginTransaction()		//Fragment transactions are used to add, remove, attach, detach, or replace fragments in the fragment list
						.add(R.id.fragment_container, fragment)
						.commit();
					}
				}
		manage the lifecycle of the fragment instance
			the fragment lifecycle methods are called by the hosting activity, instead of the OS. OS knows nothing about it
			activity calls setConetentView() -onAttach(),onCreate(...),onCreateView()-> created -onActivityCreated()-> stopped -onStart()-> paused -onResume()-> running
			-onPause()-> paused -onStop() -> stopped -onDestroyView()-> (activity shut down) -onDestroy(),onDetach()-> death
	always use fragments
		but only use fragments to encapsulate major components, which means to have no more than two or three fragments on the screen at a time 

12. java.util.UUID
	UUID mId = UUID.randomUUID();	//generate random UUID

13. Date
	the default constructor creates the instance of the current time
	toString()
android.text.format.DateFormat

