1. laying out Views in code
		@Override
		protected void onCreate(Bundle savedInstanceState) {
		    super.onCreate(savedInstanceState);
		    ViewPager viewPager = new ViewPager(this);
		    setContentView(viewPager);
		    ...
		}
	you can create the entire hierachy without using layout files, but you should not do this, because:
		layout files help to provide a clear separation between your controller and view objects
		Android’s resource qualification system can automatically choose the appropriate version of that XML file based on the properties of the device
			for example, it changes layout file based on the orientation property

2. AppCompat library
	a compatibility library provided by Google that back-ports some features of recent versions of Android to older devices
		for example, AlertDialog with the new makeover
	to use it, add the dependency and be sure to use android.support.v7.app.AlertDialog version

3. Dialogs
	AlertDialog --an all-purpose Dialog subclass that is often used
	DialogFragment --a subclass of Fragment
		wrap an AlertDialog with a DialogFragment provides more options for presenting the dialog
		an AlertDialog without a DialogFragment will vanish if the device is rotated,
			but will be recreated if it's with a DialogFragment
	using AlertDialog
		create a subclass of DialogFragment
			public class DatePickerFragment extends DialogFragment {
			    @Override
			    // The FragmentManager of the hosting activity calls this method as part of putting the DialogFragment on screen
			    public Dialog onCreateDialog(Bundle savedInstanceState) {
				return new AlertDialog.Builder(getActivity())		//Context
				    .setTitle(R.string.date_picker_title)
				    .setPositiveButton(android.R.string.ok, null)	//a button user presses to accept
											//also have negative and neutral button. These designations determine the positions of the buttons in the dialog.
											// attention, android.R != R
				    .create();
			    }
			}
		show the dialog
			show it in the right place of the hosting Activity
				FragmentManager manager = getFragmentManager();
				DatePickerFragment dialog = new DatePickerFragment();	//DatePickerFragment is the subclass I write
				dialog.show(manager, DIALOG_DATE);			//The string parameter uniquely identifies the DialogFragment in the FragmentManager’s list
		set the dialog's content
			create a layout file for the View
				the selected date in the DatePicker will survive through rotation, thanks to the saved state
					but this happens only if the View has its ID, so be sure to create an ID for the DatePicker
			inflate the View and set it to be the AlertDialog's view
				public Dialog onCreateDialog(Bundle savedInstanceState) {
				    View v = LayoutInflater.from(getActivity())
					.inflate(R.layout.dialog_date, null);

				    return new AlertDialog.Builder(getActivity())
					.setView(v)
					.setTitle(R.string.date_picker_title)
					.setPositiveButton(android.R.string.ok, null)	// the second parameter is a OnClickListener
					.create();
				}
				( this is a common procedure. inflating a View from the layout file and then set it into somewhere)

4. passing data between fragments hosted by the same Activity (but not only one fragment visible at a time)
	from the old fragment to a new one
		just pass the data by fragment arguments
		( as usual, we'll create a static method in the new fragment class to create new instance and bind arguments)
	from the new fragment back to the old one
		With activities, you call startActivityForResult(…), and the ActivityManager keeps track of the parent-child activity relationship
		for fragments, you create a similar connection by making the old fragment the target fragment of the new one
			when creating new fragment inside the old one, you call
				dialog.setTargetFragment(CrimeFragment.this, REQUEST_DATE);	// dialog is the newly created fragment
			call Fragment.onActivityResult(int, int, Intent) in the new fragment to pass data to the target fragment
				private void sendResult(int resultCode, Date date) {
					if (getTargetFragment() == null) {	// getTargetFragment() to get the targetFragment
					    return;
					}

					Intent intent = new Intent();
					intent.putExtra(EXTRA_DATE, date);

					getTargetFragment()
						.onActivityResult(getTargetRequestCode(), resultCode, intent);
				}
				then call senResult() in the appropriate place
			In the target fragment, override onActivityResult(…) to retrieve the extra
	it's kinda odd to call Fragment.onActivityResult() on your own
		but in this way, in the old fragment, retrieving data from a fragment or from an activity become the same

5. different presentation of a dialog
	why?
		on a phone, you don't have so much space, so you may want to use an activity with a full-screen fragment to ask for inputs
		on a tablet, space is not an issue, you may use a dialog to ask for inputs
	how?
		override onCreateView() instead of onCreateDialog() in DialogFragment
			in this way, you have to implement the ok button and the title on your own
			but you can present it as a dialog or embedded in an activity
		use startActivityForResult() for activity presentation
			and show() for dialog presentation
		for other details concerning multiple screen size, we will learn later
			
6. DatePicker
	int year = mDatePicker.getYear();
	int month = mDatePicker.getMonth();
        int day = mDatePicker.getDayOfMonth();	

7. java.util.Calendar
	get integers from Date
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);				// get time from a Date instance
		int year = calendar.get(Calendar.YEAR);
		int month = calendar.get(Calendar.MONTH);
		int day = calendar.get(Calendar.DAY_OF_MONTH);
	create Date from Intergers
		Date date = new GregorianCalendar(year, month, day).getTime();

8. AppCompat library
	Toolbar is a new addtion to Lollopop, to use it in former version, use AppCompat library
		prior to Lollipop, the action bar was used
	to use AppCompat
		add it as a dependency
		use one of the AppCompat themes
			themes are defined in res/values/styles.xml
			if you have multiple version of styles.xml, delete others
			open styles.xml and ensure that <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
		ensure that all activities are a subclass of AppCompatActivity
			AppCompatActivity itself is a subclass of FragmentActivity, so just replace FragmentActivity with it
	using AppCompat, an toolbar with the app name will be presented

9. Menus
	the top-right area of the toolbar is reserved for the toolbar's menu
	menus are a type of resource similar to layouts
		you create a xml file of a menu, and it will be placed in res/menu
		resource IDs are generated by Android for menus
	add an item
		<menu xmlns:android="http://schemas.android.com/apk/res/android"
		    xmlns:app="http://schemas.android.com/apk/res-auto">	// the app namespace is for showAsAction attribute
		    <item							// because this attribute is added with Toolbar, it's not in the android namespace
			android:id="@+id/menu_item_new_crime"
			android:icon="@drawable/ic_menu_add"
			android:title="@string/new_crime"
			app:showAsAction="ifRoom|withText"/>			// if there's enough room, show the icon with the text
		</menu>								// if not enough room, merely show the icon, otherwise, put it in the overflow menu
										// "always" is not recommended, "never" is suitable for those less-common actions
	creating the menu in the code
		for the hosting fragment:
			override onCreateOptionsMenu(Menu, MenuInflater)
				The FragmentManager is responsible for calling Fragment.onCreateOptionsMenu(Menu, MenuInflater) when the activity receives its onCreateOptionsMenu(…) callback from the OS			
					@Override
					public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
					    super.onCreateOptionsMenu(menu, inflater);
					    inflater.inflate(R.menu.fragment_crime_list, menu);
					}
			call setHasOptionsMenu(true) in onCreate()
				explicitly tell the FragmentManager that your fragment should receive a call to onCreateOptionsMenu(…)
	responding to menu selections
		in the hosting fragment, override onOptionsItemSelected(MenuItem)
			@Override
			public boolean onOptionsItemSelected(MenuItem item) {
			    switch (item.getItemId()) {
				case R.id.menu_item_new_crime:	// you should check the id of the menuitem
				    //do something
				    return true;		// returning true indicates that no further processing is necessary
				default:
				    return super.onOptionsItemSelected(item);
			    }
			}
	refreshing menu
		(for example enable/disable the button based on a variable)
		call getActivity().invalidateOptionsMenu();
			then the menu will be recreated
		onCreateOptionsMenu(Menu, MenuInflater) will be entered again
			so set your button based on the variable here
		
10. Android Asset Studio
	android:icon="@android:drawable/ic_menu_add"
		this is a system icon, which is found on the device rather than your project's resources
		in a prototype, using a system icon is fine, but in a release version, it's better to use your own icon, for the reason of design consistency
		a trick is to find a system icon and copy it into your resources
	to find a system icon using Android Asset Studio
		Right-click on your drawable directory in the Project Tool window and select New → Image Asset
		select Action Bar and Tab Icons, Clipart, and choose an icon
		change the name and then save it
		now you can use your own resource  android:icon="@drawable/ic_menu_add"
		

